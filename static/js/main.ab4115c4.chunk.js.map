{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","key","id","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","search","handleTermChange","onSearch","term","setState","placeholder","SearchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","items","artists","image","images","url","preview","preview_url","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","PlaylistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab4115c4.chunk.js","sourcesContent":["const clientId = '6f4d4394326e49fc86d211dda5d10a92';\r\nconst redirectUri = 'http://omo_t_quantum.surge.sh';\r\n\r\nlet accessToken; \r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n      if (accessToken) {\r\n          return accessToken;\r\n      }\r\n\r\n      //check for access token match\r\n\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n      if (accessTokenMatch && expiresInMatch) {\r\n          accessToken = accessTokenMatch[1];\r\n          const expiresIn = Number(expiresInMatch[1]);\r\n\r\n          //this clears the parameters, allowing us to grab a new access token when it expires\r\n\r\n          window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n          window.history.pushState('Access Token', null, '/');\r\n          return accessToken;\r\n     \r\n        }else{\r\n         const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n         window.location = accessUrl;\r\n      }\r\n\r\n  },\r\n\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      console.log(jsonResponse.tracks);\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        image: track.album.images[2].url,\r\n        preview: track.preview_url,\r\n        uri: track.uri\r\n      }));\r\n     });\r\n   },\r\n\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length){\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers =  {Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n      {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const PlaylistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${PlaylistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ uris: trackUris }),\r\n        })\r\n      })\r\n    })\r\n  } \r\n\r\n}\r\n\r\nexport default Spotify;","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return (\r\n        <button className=\"Track-action\" onClick={this.removeTrack}>\r\n          -\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button className=\"Track-action\" onClick={this.addTrack}>\r\n          +\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3> {this.props.track.name} </h3>\r\n          <p>\r\n            {\" \"}\r\n            {this.props.track.artist} | {this.props.track.album}{\" \"}\r\n          </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n            {\r\n            this.props.tracks.map(track => {\r\n               return <Track   track={track}  key={track.id}  onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n            })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;\r\n\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n   \r\n    handleNameChange(event) {\r\n      this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n              <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n              <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n              <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n      this.state = {\r\n        state: \"\"\r\n      } \r\n\r\n      this.search = this.search.bind(this);\r\n      this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    \r\n    search() {\r\n      this.props.onSearch(this.state.term);\r\n    } \r\n\r\n    \r\n    handleTermChange(event) {\r\n      this.setState({ term: event.target.value });\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n              <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n              <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n         )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n              <h2>Results</h2>\r\n              <TrackList tracks={this.props.SearchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults; ","import React from 'react';\n\nimport './App.css';\nimport Playlist from \"../Playlist/Playlist\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Spotify from \"../../util/Spotify\";\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n        SearchResults: [],\n        \n        playlistName: \"My PlaylistName\",\n        playlistTracks: []                  \n    };\n    \n    this.addTrack = this.addTrack.bind(this); \n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    \n  }\n  \n  \n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (this.state.playlistTracks.find( savedTrack => savedTrack.id === track.id)) {\n      return;\n    }else{\n       tracks.push(track);\n       this.setState({ playlistTracks: tracks });\n    }\n  }\n\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name })\n  }\n\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map( track => track.uri );\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n\n      })\n    })\n  }\n\n  \n  search(term) {\n     Spotify.search(term).then(SearchResults => {\n       this.setState({SearchResults: SearchResults})\n     })\n  }\n\n\n  render() {\n    return (\n        <div>\n          <h1>BO<span className=\"highlight\">XA</span>BI</h1>\n            <div className=\"App\">\n              <SearchBar onSearch={this.search}/>\n                <div className=\"App-playlist\">\n                  <SearchResults SearchResults={this.state.SearchResults} onAdd={this.addTrack} />\n                  <Playlist      playlistName={this.state.playlistName}  playlistTracks={this.state.playlistTracks}\n                                  onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} /> \n                </div>\n            </div>\n        </div>\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}